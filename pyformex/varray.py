# $Id$
##
##  This file is part of pyFormex
##  pyFormex is a tool for generating, manipulating and transforming 3D
##  geometrical models by sequences of mathematical operations.
##  Home page: http://pyformex.org
##  Project page:  http://savannah.nongnu.org/projects/pyformex/
##  Copyright 2004-2013 (C) Benedict Verhegghe (benedict.verhegghe@ugent.be)
##  Distributed under the GNU General Public License version 3 or later.
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see http://www.gnu.org/licenses/.
##

"""Working with variable width tables.

Mesh type geometries use tables of integer data to store the connectivity
between different geometric entities. The basic connectivity table in a
Mesh with elements of the same type is a table of constant width: the
number of nodes connected to each element is constant.
However, the inverse table (the elements connected to each node) does not
have a constant width.

Tables of constant width are usually stored as a 2D array, allowing fast
indexing by row and/or column number. A variable width table can be stored
(using arrays) in two ways:

- as a 2D array, with a width equal to the maximal row length.
  Unused positions in the row are then filled with an invalid value (-1).
- as a 1D array, storing a simple concatenation of the rows.
  An additional array then stores the position in that array of the first
  element of each row.

In pyFormex, variable width tables were initially stored as 2D arrays:
a remnant of the author's past FORTRAN experience. With a growing
professional use of pyFormex involving ever larger models, it became clear
that there was a large memory and speed penalty related to the use of
2D arrays. This is illustrated in the following table, obtained on the
inversion of a connectivity table of 10000 rows and 25 columns.
The table shows the memory size of the inverse table, the time needed to
compute it, and the time to compute both tables. The latter involves an
extra conversion of the stored array to the other data type.

====================  ===============  ==============  ===============
Stored as:             2D (ndarray)     1D (Varray)     1D (Varray)
Rows are sorted:       yes              yes             no
====================  ===============  ==============  ===============
Memory size                450000         250000        250000
Time to create table       128 ms         49 ms         25ms
Time to create both        169 ms         82 ms         57ms
====================  ===============  ==============  ===============

The memory and speed gains of using the Varray are important.
The 2D array can even be faster generated by first creating the
1D array, and then converting that to 2D.
Not sorting the entries in the Varray provides a further gain.
The Varray class defined below therefore does not sort the rows
by default, but provides the methods to sort them when needed.
"""

from arraytools import *

class Varray(object):
    """A variable width 2D integer array

    This class provides an efficient way to store tables of
    nonnegative integers when the rows of the table may have
    different length.

    For large tables this may allow a serious memory saving
    compared to the full array as returned by
    :func:`arraytools.inverseIndex`. Data in the Varray are stored as
    a single 1D array, containing the concatenation of all rows.
    An index is kept with the start position of each row in the 1D array.

    Parameters:

    - `data`: can be one of the following:

      - a list of lists of integers. Each item in the list contains
        one row of the table.

      - a 2D ndarray of integer type. The nonnegative numbers on each row
        constitute the data for that row.

      - a 1D array or list of integers, containing the concatenation of
        the rows. In this case the specification of the index as second
        argument is required.

    - `ind`: only used when `data` is already a concatenation of all rows.
      It is a 1D integer array or list specifying the position in `data` of
      the first element of each row. Its length should be equal to the
      number of rows (`nrows`) or `nrows+1`.
      It should be a non-decreasing series of integer values, starting with 0,
      and ending with the total number of elements in `data` in the position
      `nrows+1`. This last value may be omitted, and will then be added
      automatically. Note that two subsequent elements may be equal,
      corresponding with an empty row.

    Attributes:

    - `nrows`: the number of rows in the table
    - `width`: the maximum row length
    - `size`: the total number of entries in the table

    A Varray is by default printed in user-friendly format:

    >>> Va = Varray([[0],[1,2],[0,2,4],[0,2]])
    >>> print(Va)
    Varray (4,3)
      [0]
      [1 2]
      [0 2 4]
      [0 2]
    <BLANKLINE>

    Indexing: The data for any row can be obtained by simple indexing:

    >>> print(Va[1])
    [1 2]

    Indexing with an iterable of integers returns a new Varray:

    >>> print(Va[[1,3]])
    Varray (2,2)
      [1 2]
      [0 2]
    <BLANKLINE>

    Iterator: A Varray provides its own iterator:

    >>> for row in Va:
    ...     print(row)
    [0]
    [1 2]
    [0 2 4]
    [0 2]

    """
    def __init__(self,data=[],ind=[]):
        """Initialize the Varray. See the class docstring."""

        # If data is an array, convert to list of lists
        try:
            data = checkArray(data,kind='i',ndim=2)
            data = [ row[row>=0] for row in data ]
        except:
            pass

        # If data is a list of lists, concatenate and create index
        try:
            # construct row length array
            rowlen = [ len(row) for row in data ]
            ind = cumsum([0]+rowlen)
            data = concatenate(data).astype(Int)
        except:
            pass

        # Data and ind should now be 1D arrays
        try:
            data = checkArray(data,kind='i',ndim=1)
            ind = checkArray(ind,kind='i',ndim=1)
            ind.sort()
            if ind[0] != 0 or ind[-1] > len(data):
                raise ValueError
            if ind[-1] != len(data):
                ind = concatenate([ind,[len(data)]])
        except:
            raise ValueError,"Invalid input data for Varray"

        # Store the data
        self.data = data
        self.ind = ind
        # We also store the width because it is often needed and
        # expensive to compute
        self.width = max(self.lengths)


    # Attributes computed ad hoc, because cheap(er)

    @property
    def lengths(self):
        """Return the length of all rows of the Varray"""
        return self.ind[1:]-self.ind[:-1]

    @property
    def nrows(self):
        """Return the number of rows in the Varray"""
        return len(self.ind) - 1

    @property
    def size(self):
        """Return the total number of elements in the Varray"""
        return self.ind[-1]


    ## Do we need this? Yes, if we do not store lengths
    def length(self,i):
        """Return the length of row i"""
        return self.ind[i+1]-self.ind[i]


    def __getitem__(self,i):
        """Return the data for the row or rows i.

        Parameters:

        - `i`: the index of the requested row(s).

        Returns:

        - if `i` is a single integer: a 1D integer array with the values of
          row i,
        - if `i` is an iterable of integers: a Varray only containing the rows
          whose index occurs in `i`.
        """
        if isInt(i):
            return self.data[self.ind[i]:self.ind[i+1]]
        else:
            return Varray([ self[j] for j in i ])
        # Shall we also add a tuple as index?
        # to allow self[i,j] instead of i[i][j]


    def __iter__(self):
        """Return an iterator for the Varray"""
        self.row = 0
        return self


    def next(self):
        """_Return the next row of the Varray"""
        if self.row >= self.nrows:
            raise StopIteration
        row = self[self.row]
        self.row += 1
        return row


    def index(self,sel):
        """Convert a selector to an index

        sel is either a list of element numbers or a bool array with
        length self.size

        Returns an index array with the selected numbers.
        """
        try:
            sel = checkArray(sel,shape=(self.size,),kind='b')
            sel = where(sel)[0]
        except:
            sel = checkArray(sel,kind='i')
        return sel


    def rowindex(self,sel):
        """Return the rowindex for the elements flagged by selector sel.

        sel is either a list of element numbers or a bool array with
        length self.size
        """
        sel = self.index(sel)
        return self.ind.searchsorted(sel,side='right')-1


    def colindex(self,sel):
        """Return the column index for the elements flagged by selector sel.

        sel is either a list of element numbers or a bool array with
        length self.size
        """
        sel = self.index(sel)
        ri = self.rowindex(sel)
        return sel - self.ind[ri]


    def where(self,sel):
        """Return row and column index of the selected elements

        sel is either a list of element numbers or a bool array with
        length self.size

        Returns a 2D array where the first column is the row index
        and the second column the corresponding column index of an
        element selected by sel
        """
        return column_stack([self.rowindex(sel),self.colindex(sel)])


    def index1d(self,i,j):
        """Return the sequential index for the element with 2D index i,j"""
        if j >= 0 and j < self.length(i):
            return self.ind[i]+j
        else:
            raise IndexError,"Index out of bounds"


    def sorted(self):
        return Varray([sorted(row) for row in self])


    def sort(self):
        """Sort the Varray inplace."""
        [ row.sort() for row in self ]


    def toArray(self):
        """Convert the Varray to a 2D array.

        Returns a 2D array with shape (self.nrows,self.width), containing
        the row data of the Varray.
        Rows which are shorter than width are padded at the start with
        values -1.
        """
        a = -ones((self.nrows,self.width),dtype=Int)
        for i,r in enumerate(self):
            if len(r) > 0:
                a[i,-len(r):] = r
        return a


    def toList(self):
        """Convert the Varray to a nested list.

        Returns a list of lists of integers.
        """
        return [ r.tolist() for r in self ]


    def inverse(self):
        """Return the inverse of a Varray.

        The inverse of a Varray is again a Varray. Values k on a row i will
        become values i on row k. The number of data in both Varrays is thus
        the same.

        The inverse of the inverse is equal to the original. Two Varrays are
        equal if they have the same number of rows and all rows contain the
        same numbers, independent of their order.

        Example:

        >>> a = Varray([[0,1],[2,0],[1,2],[4]])
        >>> b = a.inverse()
        >>> c = b.inverse()
        >>> print(a,b,c)
        Varray (4,2)
          [0 1]
          [2 0]
          [1 2]
          [4]
         Varray (5,2)
          [0 1]
          [0 2]
          [1 2]
          []
          [3]
         Varray (4,2)
          [0 1]
          [0 2]
          [1 2]
          [4]
        <BLANKLINE>
        """
        return inverseIndex(self)


    def __str__(self):
        """Nicely print the Varray"""
        s = "Varray (%s,%s)\n" % (self.nrows,self.width)
        for row in self:
            s += '  ' + row.__str__() + '\n'
        return s


def inverseIndex(a,sort=False,expand=False):
    """Create the inverse of a 2D index array.

    Parameters:

    - `a`: a Varray or a 2D index array. A 2D index array is a 2D integer
      array where only nonnegative values are significant and negative
      values are silently ignored.
      While in most cases all values in a row are unique, this is not a
      requirement. Degenerate elements may have the same node number
      appearing multiple times in the same row.

    -

    Returns the inverse index, as a Varray (default) or as an ndarray (if
    expand is True). If sort is True, rows are sorted.

    Example:

      >>> a = inverseIndex([[0,1],[0,2],[1,2],[0,3]])
      >>> print(a)
      Varray (4,3)
        [0 1 3]
        [0 2]
        [1 2]
        [3]
      <BLANKLINE>
    """
    if isinstance(a,Varray):
        a = a.toArray()
    a = checkArray(a,ndim=2,kind='i')
    b = resize(arange(a.shape[0]),a.shape[::-1])
    c = stack([a,b.transpose()]).reshape(2,-1)
    s = c[0].argsort()
    t = c[0][s]
    u = c[1][s]
    v = t.searchsorted(arange(t.max()+1))
    if v[0] > 0:
        # There were negative numbers: remove them
        u = u[v[0]:]
        v -= v[0]
    Va = Varray(u,v)
    if sort:
        Va.sort()
    if expand:
        return Va.toArray()
    return Va


# End
